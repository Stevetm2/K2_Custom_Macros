
[save_variables]
filename:~/printer_data/config/variables_macro_settings.txt
#   save the database to disk

[gcode_macro SHOW_PROMT_FIL_SETTINGS]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Filament Settings"

    RESPOND TYPE=command MSG="action:prompt_button NextPrint: Auto Save RFID PA/Flow|FIL_RFID_AUTO_SAVE_ON|info" # blue
    RESPOND TYPE=command MSG="action:prompt_button NextPrint: Auto Save RFID PA/Flow with Z!|FIL_RFID_AUTO_SAVE_WITH_Z_ON|error" # red
    #RESPOND TYPE=command MSG="action:prompt_button Now: Save RFID PA/Flow for loaded filament|FIL_RFID_SAVE|warning" # yellow
    FIL_RFID_APPLY TYPE='PREVIEW' PREVIEWGCODE='RESPOND TYPE=command MSG="action:prompt_button Now: Save RFID PA/Flow for filament - %s|FIL_RFID_SAVE|warning|RESPOND TYPE=command MSG=action:prompt_end"' # returns 'Slot' from FIL_RFID_APPLY into the %s

    {% set detected = printer["filament_switch_sensor filament_sensor"].filament_detected %}
    {% set current_PA = printer.extruder.pressure_advance %}
    {% set current_flow = printer.gcode_move.extrude_factor %}

    RESPOND TYPE=command MSG="action:prompt_text  Fil_Detected={detected} PA={current_PA} Flow={current_flow}"

    RESPOND TYPE=command MSG="action:prompt_footer_button continue|RESPOND TYPE=command MSG=action:prompt_end"
    RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro SHOW_PROMT_FIL_STATUS]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Filament Status"

    {% set detected = printer["filament_switch_sensor filament_sensor"].filament_detected %}
    {% set current_PA = printer.extruder.pressure_advance %}
    {% set current_flow = printer.gcode_move.extrude_factor %}

    RESPOND TYPE=command MSG="action:prompt_text  Fil_Detected={detected} PA={current_PA} Flow={current_flow}"
    {% set SIDE_RFID= printer['filament_rack'].vender|string %} # may return '-1'
    M1177 SIDE_RFID={SIDE_RFID}
    RESPOND TYPE=command MSG="action:prompt_text  SIDE_RFID={SIDE_RFID}"
    {% set Slot = printer.box.T1.filament %}
    M1177 slot={Slot}
    {% for boxid in ['T1', 'T2', 'T3', 'T4'] %}
      M1177 box_{boxid}={printer.box[boxid].filament}
      FIL_RFID_APPLY TYPE=PREVIEW SLOT={boxid}A # print RFIDS
      RESPOND TYPE=command MSG="action:prompt_text BOX_{boxid}=ActiveSlot:{printer.box[boxid].filament} {printer.box[boxid].vender}" # ui ActiveSlot+RFIDS
    {% endfor %}

    RESPOND TYPE=command MSG="action:prompt_footer_button continue|RESPOND TYPE=command MSG=action:prompt_end"
    RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro _SHOW_PROMT_BUTTON_GROUPS]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin MacroPrompt"
    RESPOND TYPE=command MSG="action:prompt_text These are all button colors"
    RESPOND TYPE=command MSG="action:prompt_button default|TEST" # dark grey
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button primary|TEST|primary" # light blue
    RESPOND TYPE=command MSG="action:prompt_button secondary|TEST|secondary" # grey
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button info|TEST|info" # blue
    RESPOND TYPE=command MSG="action:prompt_button warning|TEST|warning" # yellow
    RESPOND TYPE=command MSG="action:prompt_button error|TEST Tool=3|error" # red
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _TEST]
gcode:
    M1177 PROMPT TEST "{rawparams}"

[gcode_macro _FIL_RFID_GET_]
description: INTERNAL CALL USE - FIL_RFID_APPLY TYPE=GET - Allow Get of auto PA and flow Calibration, for the current spool, from the DB and apply to the printer
gcode:
    {% set RFIDtag = params.RFID|default('NONE')|string|upper %}
    {% set Slot = params.SLOT|default('NONE')|string|upper %}
    {% set svv = printer.save_variables.variables %}
    {% set loadedDB = svv.database %}
    {% if printer["gcode_macro FIL_RFID_APPLY"].enable_rfid_auto_save|int %}
      SET_GCODE_VARIABLE MACRO=FIL_RFID_APPLY VARIABLE=auto_save_slot VALUE='"{Slot}"'
      M1177 FIL_GET SKIPPING: in calibration mode, will SAVE once complete
    {% else %}
      {% if RFIDtag in loadedDB %}
        {% set RFIDtagDB = loadedDB[RFIDtag] %}
        SET_PRESSURE_ADVANCE ADVANCE={RFIDtagDB["pa"]}
        {% set flow = RFIDtagDB["flow"] / printer["gcode_macro FIL_RFID_APPLY"].default_slicer_flow %}
        M1177 Fil Get Savedflow={RFIDtagDB["flow"]} will set AdjustedFlow={flow}
        M221 S{flow*100}
        # Set Z offset if needed, on first layer and first FIL change after purge line ONLY
        {% set start_z_offset = printer["gcode_macro FIL_RFID_APPLY"].start_z_offset %}
        {% if start_z_offset|int == -999 %}
          # set FIL z_offset after purge line on first layer
          {% set axes = printer.toolhead.homed_axes %}
          {% set z_homed = axes is defined and axes[2] is defined %}
          {% set xyz_pos = printer['toolhead'].position %}
          {% if z_homed and xyz_pos[2] <= 0.26 %} # 0.20 + 0.06: +0.06 account for bed mesh and/or printer.cfg z_offset?
            {% set start_z_offset = printer['gcode_move'].homing_origin[2] %} # get current printer z_offset
            {% set new_z_offset = start_z_offset %}
            SET_GCODE_VARIABLE MACRO=FIL_RFID_APPLY VARIABLE=start_z_offset VALUE={start_z_offset} # first layer start
            {% if RFIDtagDB["z_offset"]|int != -999 %} # is there a FIL z_offset
              {% set new_z_offset = RFIDtagDB["z_offset"] %} # use fil z
              M1177 Fil Get will set ZOff={new_z_offset}!!
              SET_GCODE_OFFSET Z={new_z_offset} # !! Experimental !!
            {% endif %}
            M1177 Fil Get first layer ZOff={new_z_offset} Changed={new_z_offset!=start_z_offset} Pos={xyz_pos}
          {% endif %}
        {% endif %}
        M1177 FIL_GET CurrentSlot={Slot} FOUND {RFIDtag}:{loadedDB[RFIDtag]}
      {% else %}
        M1177 FIL_GET CurrentSlot={Slot} Not FOUND in DB {RFIDtag}
      {% endif %}
    {% endif %}
    #M1177 FIL_GET fullDB={loadedDB} #{loadedDB.__ getitem__(FIL_Placeholder)}

[gcode_macro _FIL_RFID_SAVE_]
description: INTERNAL CALL USE -  FIL_RFID_APPLY TYPE=SAVE - Allow Save of auto PA and flow Calibration to the DB for the current spool 
gcode:
    {% set RFIDtag = params.RFID|default('NONE')|string|upper %}
    {% set Slot = params.SLOT|default('NONE')|string|upper %}
    {% set svv = printer.save_variables.variables %}
    {% set loadedDB = svv.database %}
    {% if printer["gcode_macro FIL_RFID_APPLY"].enable_rfid_auto_save|int == 2 %}
      {% set z_offset = printer['gcode_move'].homing_origin[2] %}
    {% else %}
      {% set z_offset = -999.00 %}
      {% if RFIDtag in loadedDB %}
        {% set z_offset = loadedDB[RFIDtag]["z_offset"] %} # use last stored z_offset (likely -999.00)
      {% endif %}
    {% endif %}
    #{% set z_offset = -999.00 %} # debug
    {% set dictVals={ "pa":printer.extruder.pressure_advance, "flow":printer.gcode_move.extrude_factor,"z_offset":z_offset} %}
    #{% set dictVals={ "pa":0.049, "flow":1.0,"z_offset":-999.00} %}# debug
    {% set dummy = loadedDB.__setitem__(RFIDtag, dictVals) %} # setting one key only
    SAVE_VARIABLE VARIABLE=database VALUE="{loadedDB | pprint | replace("\n", "") | replace("\"", "\\\"")}"
    M1177 FIL_SAVE fullDB={loadedDB}
    M1177 FIL_SAVE Will Save CurrentSlot={Slot} {RFIDtag}:{dictVals}


[gcode_macro FIL_RFID_SAVE]
description: Allow Save of auto PA and flow Calibration values currently set in the printer - Note flow is reset during END_PRINT, so use during printing or use FIL_RFID_AUTO_SAVE_ON to auto save just before END_PRINT is called.
gcode:
    FIL_RFID_APPLY TYPE=SAVE

[gcode_macro FIL_RFID_AUTO_SAVE_ON]
description: Allow AUTO Save of PA and flow Calibration values at the end of the next print.  Will auto disable once done with the print.
gcode:
     {% set enable = params.ENABLE|default('1')|int %}
     SET_GCODE_VARIABLE MACRO=FIL_RFID_APPLY VARIABLE=enable_rfid_auto_save VALUE={enable} # Switch on for the next print - don't store z_offset

[gcode_macro FIL_RFID_AUTO_SAVE_WITH_Z_ON]
description: Allow AUTO Save of PA and flow Calibration values at the end of the next print.  Will auto disable once done.
gcode:
     SET_GCODE_VARIABLE MACRO=FIL_RFID_APPLY VARIABLE=enable_rfid_auto_save VALUE=2 # Switch on for the next print - store z_offset


[gcode_macro FIL_RFID_APPLY]
description: Allow Get <TYPE=GET> and Save <TYPE=SAVE> of auto PA and flow Calibration for the current spool - default is to GET from DB and apply to the printer. Set SLOT to A..D or ACTIVE. Set TYPE=PREVIEW to only print/debug with no load and save, for debugging.
variable_enable_rfid_auto_save:0
variable_start_z_offset: -999
variable_auto_save_slot: "None"
variable_current_tool_id: "NONE"
variable_default_slicer_flow: 0.95
gcode:
    {% set apply_type = params.TYPE|default('GET')|string|upper %}
    {% set Override_Slot = params.SLOT|default('ACTIVE')|string|upper %}
    {% set tool_id = params.TOOL|default('NONE')|string|upper %}
    {% set preview_gcode = params.PREVIEWGCODE|default('')|string %}

    {% if preview_only %}
      {% set apply_type = "PREVIEW" %}
    {% endif %}

    {% if apply_type == "GET" %}
      SET_GCODE_VARIABLE MACRO=FIL_RFID_APPLY VARIABLE=current_tool_id VALUE='"{tool_id}"'
    {% endif %}

    {% set RFIDS = printer.box.T1.vender %}
    {% set Slot = "None" %}
    {% set Box = "None" %}
    {% if printer.box.T1.filament in ['A', 'B', 'C', 'D'] %}
      {% set Box = 'T1' %}
    {% elif printer.box.T2.filament in ['A', 'B', 'C', 'D'] %}
      {% set Box = 'T2' %}
    {% elif printer.box.T3.filament in ['A', 'B', 'C', 'D'] %}
      {% set Box = 'T3' %}
    {% elif printer.box.T4.filament in ['A', 'B', 'C', 'D'] %}
      {% set Box = 'T4' %}
    {% endif %}
    {% if not Box == "None" %}
      {% set Slot = Box + printer.box[Box].filament %}
      {% set RFIDS = printer.box[Box].vender %}
    {% endif %}

    {% if apply_type == "GET" %} # debug
      #{% set Slot = "T2D" %} # debug
    {% endif %} # debug

    {% if Override_Slot != "ACTIVE" %}
      {% set Slot = Override_Slot %}#T1A
      {% set Box = Slot[0:-1] %}#T1
      {% set RFIDS = printer.box[Box].vender %}
    {% endif %}

    M1177 done box_{Box}={Slot}

    # if there is no CFS slot loaded, but we have filament at the nozzel, then it must be from the side spool
    {% if Slot == "None" and printer["filament_switch_sensor filament_sensor"].filament_detected %}
      {% set Slot = "Side" %}
    {% endif %}

    # we are doing and auto save
    {% if apply_type == "SAVE" and Slot == "None" and auto_save_slot != "None" %}
      {% set Slot = auto_save_slot %}
      {% set Box = Slot[0:-1] %}#T2
      {% set RFIDS = printer.box[Box].vender %}
      SET_GCODE_VARIABLE MACRO=FIL_RFID_APPLY VARIABLE=auto_save_slot VALUE='"None"'
      M1177 FIL_{apply_type} Auto Info: Slot={Slot} Box={Box}.
    {% endif %}

    #{% if Slot != "None" %}
      {% set Box2 = Slot[0:-1] %}
      #{% set RFIDS = printer.box['T1'].vender %} # get the box from the Slot
    #{% endif %}
    #M1177 Slot={Slot} Box2={Box2}

    M1177 FIL_{apply_type} Info: SlotActive={Slot} BoxActive={Box}
    M1177 FIL_BOX_RFIDS={RFIDS}
    M1177 FIL_SIDE_RFID={printer['filament_rack'].vender}

    {% if apply_type == "PREVIEW" and not preview_gcode == "" %}
        {preview_gcode|format(Slot)}
    {% endif %}

    {% set RFID='Error' %}
    {% if Slot == 'None' %}
      {% set RFID='NoneActive' %}
      M1177 FIL_{apply_type} No active filament
    {% elif Slot[-1:] == 'A' %}
      {% set RFID=RFIDS[0] %}
    {% elif Slot[-1:] == 'B' %}
      {% set RFID=RFIDS[1] %}
    {% elif Slot[-1:] == 'C' %}
      {% set RFID=RFIDS[2] %}
    {% elif Slot[-1:] == 'D' %}
      {% set RFID=RFIDS[3] %}
    {% elif Slot == 'Side' %}
      {% set RFID= printer['filament_rack'].vender|string %} # may return '-1'
    {% endif %}

    {% if RFID not in ['NoneActive','Error','unknown','-1']  %}
      # Strip first 8 and last 16
      # Removes Batch/Date and Weight/Serial/Reserved
      # Stores Supplier/Material/Color
      {% set RFIDtag = RFID[8:-16] %}
      {% if apply_type == "GET" %}
        _FIL_RFID_GET_ RFID={RFIDtag} SLOT={Slot}
      {% elif apply_type == "SAVE" %}
        _FIL_RFID_SAVE_ RFID={RFIDtag} SLOT={Slot}
      {% elif apply_type == "PREVIEW" %}
        {% set loadedDB = printer.save_variables.variables.database %}
        M1177 FIL_{apply_type} RFIDDB="{ loadedDB[RFIDtag] }" Slot={Slot} # report only
      {% endif %}
    {% else %}
      {% if apply_type == "GET" and printer["gcode_macro FIL_RFID_APPLY"].enable_rfid_auto_save == 0 %}
        # Not found so set to printer defaults
        SET_PRESSURE_ADVANCE ADVANCE={printer.configfile.settings.extruder.pressure_advance}
        M221 S100
      {% endif %}
      M1177 FIL_{apply_type} Slot={Slot} RFID={RFID} # report not available state
    {% endif %}


[delayed_gcode FIL_RFID_INIT]
initial_duration: 6.0
##gcode: ## add INIT UI
##    FIL_RFID_INIT_ ## add INIT UI
##[gcode_macro FIL_RFID_INIT_] ## add INIT UI
##description: Allow load of auto PA and flow Calibrattion DB ## add INIT UI
gcode:
    {% set svv = printer.save_variables.variables %}
    {% if svv["database"] is defined %}
      M1177 FIL INIT DB={svv.database}
    {% else %}
      {% set clearDB = {"FIL_Placeholder":{"pa":0.045, "flow":0.99, "z_offset":-999.00}, "settings":{"cut_pre_retract":0.0}} %}
      M1177 FIL INIT DB BEING CREATED={clearDB}
      SAVE_VARIABLE VARIABLE=database VALUE="{clearDB | pprint | replace("\n", "") | replace("\"", "\\\"")}"
    {% endif %}

[gcode_macro _FIL_CUT_PRE_RETRACT]
description: Retract filament just before T0, T1 etc.  Hoping to save filament on color changes without causing clogs.  Experimental,  change the cut_pre_retract value in the .txt file to test.  Purge values in slicer remain unchanged, just less material is actually purged due to this pre retract
gcode:
    {% set tool_id = params.TOOL|default('IGNORE')|string|upper %}
    {% set tool_id_current = printer["gcode_macro FIL_RFID_APPLY"].current_tool_id %}
    {% set tool_changed = (tool_id != tool_id_current and tool_id_current != "NONE") %}

    {% set svv = printer.save_variables.variables %}
    {% set loadedDB = svv.database %}
    {% set retract = -loadedDB["settings"]["cut_pre_retract"] %}
    {% set performed = False %}

    #M400 # wait for moves to finish
    G92 E0 #resets the extruder
    {% if retract < 0.0 and printer.extruder.can_extrude|lower == 'true' and tool_changed %}
      G1 E{retract} F1500 #set it to retract X mm at 25mm/s - !! Experimental !!  cut_pre_retract=20 works, but reduce if you get non-flat/bulging end cuts or clogging!
      M1177 FIL_CUT_PRE_RETRACT PERFORMED G1 E{retract}
      M400 # wait for moves to finish
      G92 E0 #resets the extruder
      {% set performed = True %}
    {% endif %}
    M1177 FIL_CUT_PRE_RETRACT E={retract} TEMP={printer.extruder.temperature} ToolID_CHANGED={tool_changed}  ToolID_Current={tool_id_current} ToolID={tool_id} Performed={performed}


[gcode_macro FIL_BOX_QUIT_MATERIAL]
description: Cut filament at toolhead and retract/retrude currently loaded CFS Slot material - Eg, Use after a Klipper emergency stop, it will know which slot to unload
#rename_existing: _BOX_QUIT_MATERIAL
gcode:
    # adding this macro so we know how to use this feature when needed
    BOX_QUIT_MATERIAL

[gcode_macro FIL_HEAT]
description: Heat filament
gcode:
    M104 S220

[gcode_macro BED_HEAT]
description: Heat bed
gcode:
    M140 S50

[gcode_macro SHOW_PROMT_BED_SOAK]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Heat Siak Options"
    RESPOND TYPE=command MSG="action:prompt_text Heat Soak"

    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    #RESPOND TYPE=command MSG="action:prompt_button info|TEST|info"
    RESPOND TYPE=command MSG="action:prompt_button HOME AND BED SOAK 50 DEG|BED_HOME_SOAK BED_TEMP=50 TIME=5|warning"
    RESPOND TYPE=command MSG="action:prompt_button HOME AND BED SOAK 60 DEG|BED_HOME_SOAK BED_TEMP=60 TIME=10|error"
    RESPOND TYPE=command MSG="action:prompt_button HOME AND BED SOAK 70 DEG|BED_HOME_SOAK BED_TEMP=70 TIME=15|error"
    RESPOND TYPE=command MSG="action:prompt_button HOME AND BED SOAK 90 DEG|BED_HOME_SOAK BED_TEMP=90 TIME=20|error"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button continue|RESPOND TYPE=command MSG=action:prompt_end"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro BED_HOME_SOAK]
description: Heat bed and print to tty when time is out
gcode:
    {% set bed_temp = params.BED_TEMP|default('50')|string|upper %}
    M1177 BED_HOME_SOAK START "{rawparams}"
    M140 S{bed_temp}
    RESPOND TYPE=command MSG=action:prompt_end
    G28
    M1177 BED_HOME_SOAK DONE HOMING

[gcode_macro T0]
description: Tool change and allow setting of FIL values
rename_existing: T0.1
gcode:
    _FIL_CUT_PRE_RETRACT TOOL=0
    T0.1
    FIL_RFID_APPLY TYPE=GET TOOL=0

[gcode_macro T1]
description: Tool change and allow setting of FIL values
rename_existing: T1.1
gcode:
    _FIL_CUT_PRE_RETRACT TOOL=1
    T1.1
    FIL_RFID_APPLY TYPE=GET TOOL=1

[gcode_macro T2]
description: Tool change and allow setting of FIL values
rename_existing: T2.1
gcode:
    _FIL_CUT_PRE_RETRACT TOOL=2
    T2.1
    FIL_RFID_APPLY TYPE=GET TOOL=2

[gcode_macro T3]
description: Tool change and allow setting of FIL values
rename_existing: T3.1
gcode:
    _FIL_CUT_PRE_RETRACT TOOL=3
    T3.1
    FIL_RFID_APPLY TYPE=GET TOOL=3

[gcode_macro T4]
description: Tool change and allow setting of FIL values
rename_existing: T4.1
gcode:
    _FIL_CUT_PRE_RETRACT TOOL=4
    T4.1
    FIL_RFID_APPLY TYPE=GET TOOL=4

[gcode_macro T5]
description: Tool change and allow setting of FIL values
rename_existing: T5.1
gcode:
    _FIL_CUT_PRE_RETRACT TOOL=5
    T5.1
    FIL_RFID_APPLY TYPE=GET TOOL=5

[gcode_macro T6]
description: Tool change and allow setting of FIL values
rename_existing: T6.1
gcode:
    _FIL_CUT_PRE_RETRACT TOOL=6
    T6.1
    FIL_RFID_APPLY TYPE=GET TOOL=6

[gcode_macro T7]
description: Tool change and allow setting of FIL values
rename_existing: T7.1
gcode:
    _FIL_CUT_PRE_RETRACT TOOL=7
    T7.1
    FIL_RFID_APPLY TYPE=GET TOOL=7


[gcode_macro BOX_CUT_MATERIAL]
description: Pre Cut retract filament
rename_existing:_BOX_CUT_MATERIAL
gcode:
    _FIL_CUT_PRE_RETRACT
    _BOX_CUT_MATERIAL {rawparams}


[gcode_macro BOX_START_PRINT]
description: Check FIL at start of print
rename_existing:_BOX_START_PRINT
gcode:
    # debug FIL_RFID_APPLY TYPE=GET
    SET_GCODE_VARIABLE MACRO=FIL_RFID_APPLY VARIABLE=start_z_offset VALUE=-999.00 # init for first layer, first FIL change z_offset apply
    SET_GCODE_VARIABLE MACRO=FIL_RFID_APPLY VARIABLE=current_tool_id VALUE='"NONE"'

    _BOX_START_PRINT {rawparams}


[gcode_macro BOX_END_PRINT]
description: Auto Save the filament values at the end of a print
rename_existing: _BOX_END_PRINT
gcode:
   {% if printer["gcode_macro FIL_RFID_APPLY"].enable_rfid_auto_save %}
     FIL_RFID_APPLY TYPE=SAVE
     M1177 FIL_END_PRINT AUTO SAVE CALIBRATION DONE.
     SET_GCODE_VARIABLE MACRO=FIL_RFID_APPLY VARIABLE=enable_rfid_auto_save VALUE=0 # Switch back off
   {% else %}
     # Not auto save so we might have changed the z offset in _FIL_RFID_GET_
     {% set start_z_offset = printer["gcode_macro FIL_RFID_APPLY"].start_z_offset %}
     {% if start_z_offset|int != -999 %}
       SET_GCODE_OFFSET Z={start_z_offset} # !! Experimental !!
     {% endif %}
   {% endif %}
   M1177 FIL_END_PRINT success
   SET_GCODE_VARIABLE MACRO=FIL_RFID_APPLY VARIABLE=start_z_offset VALUE=-999.00 # clear for next print
   SET_GCODE_VARIABLE MACRO=FIL_RFID_APPLY VARIABLE=current_tool_id VALUE='"NONE"'

   _BOX_END_PRINT {rawparams}






