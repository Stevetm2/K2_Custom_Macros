
[save_variables]
filename:~/printer_data/config/variables_macro_settings.txt
#   save the database to disk

[gcode_macro _FIL_RFID_GET_]
description: INTERNAL CALL USE - FIL_RFID_APPLY TYPE=GET - Allow Get of auto PA and flow Calibration, for the current spool, from the DB and apply to the printer
gcode:
    {% set RFIDtag = params.RFID|default('NONE')|string|upper %}
    {% set Slot = params.SLOT|default('NONE')|string|upper %}
    {% set svv = printer.save_variables.variables %}
    {% set loadedDB = svv.database %}
    {% if RFIDtag in loadedDB %}
      {% if printer["gcode_macro FIL_RFID_APPLY"].enable_rfid_auto_save %}
        M1177 FIL_GET SKIPPING: in calibration mode, will SAVE once complete
      {% else %}
        {% set RFIDtagDB = loadedDB[RFIDtag] %}
        SET_PRESSURE_ADVANCE ADVANCE={RFIDtagDB["pa"]}
        M221 S{RFIDtagDB["flow"]*100}

        # Set Z offset if needed
        {% set start_z_offset = printer["gcode_macro FIL_RFID_APPLY"].start_z_offset %}
        {% if start_z_offset == -999 %}
          {% set start_z_offset = printer['gcode_move'].homing_origin[2] %}
          SET_GCODE_VARIABLE MACRO=FIL_RFID_APPLY VARIABLE=start_z_offset VALUE={start_z_offset}
        {% endif %}
        {% set new_z_offset = start_z_offset %} # init to start z
        {% if "z_offset" in RFIDtagDB and RFIDtagDB["z_offset"] != -999 %}
          {% set new_z_offset = RFIDtagDB["z_offset"] %} # use fil z
          M1177 Fil Get will set ZOff={new_z_offset}!!
        {% endif %}
        SET_GCODE_OFFSET Z={new_z_offset} # !! Experimental !!
        M1177 Fil Get ZOff={new_z_offset} Changed={new_z_offset!=start_z_offset}

      {% endif %}
      M1177 FIL_GET CurrentSlot={Slot} FOUND {RFIDtag}:{loadedDB[RFIDtag]}
    {% else %}
      M1177 FIL_GET CurrentSlot={Slot} Not FOUND {RFIDtag}
    {% endif %}
    #M1177 FIL_GET fullDB={loadedDB} #{loadedDB.__ getitem__(FIL_Placeholder)}

[gcode_macro _FIL_RFID_SAVE_]
description: INTERNAL CALL USE -  FIL_RFID_APPLY TYPE=SAVE - Allow Save of auto PA and flow Calibration to the DB for the current spool 
gcode:
    {% set RFIDtag = params.RFID|default('NONE')|string|upper %}
    {% set Slot = params.SLOT|default('NONE')|string|upper %}
    {% set svv = printer.save_variables.variables %}
    {% set loadedDB = svv.database %}
    {% set z_offset = printer['gcode_move'].homing_origin[2] %}
    #{% set z_offset = -999 %} # debug
    {% set dictVals={ "pa":printer.extruder.pressure_advance, "flow":printer.gcode_move.extrude_factor,"z_offset":z_offset} %}
    #{% set dictVals={ "pa":0.049, "flow":1.0,"z_offset":-999} %}# debug
    {% set dummy = loadedDB.__setitem__(RFIDtag, dictVals) %} # setting one key only
    SAVE_VARIABLE VARIABLE=database VALUE="{loadedDB | pprint | replace("\n", "") | replace("\"", "\\\"")}"
    M1177 FIL_SAVE fullDB={loadedDB}
    M1177 FIL_SAVE Will Save CurrentSlot={Slot} {RFIDtag}:{dictVals}


[gcode_macro FIL_RFID_SAVE]
description: Allow Save of auto PA and flow Calibration values currently set in the printer - Note flow is reset during END_PRINT, so use during printing or use FIL_RFID_AUTO_SAVE_ON to auto save just before END_PRINT is called.
gcode:
    FIL_RFID_APPLY TYPE=SAVE

[gcode_macro FIL_RFID_AUTO_SAVE_ON]
description: Allow AUTO Save of PA and flow Calibration values at the end of the next print.  Will auto disable once done.
gcode:
     SET_GCODE_VARIABLE MACRO=FIL_RFID_APPLY VARIABLE=enable_rfid_auto_save VALUE=1 # Switch on for the next print


[gcode_macro FIL_RFID_APPLY]
description: Allow Get <TYPE=GET> and Save <TYPE=SAVE> of auto PA and flow Calibration for the current spool - default is to GET from DB and apply to the printer
variable_enable_rfid_auto_save:0
variable_start_z_offset: -999
gcode:
    {% set apply_type = params.TYPE|default('GET')|string|upper %}
    {% set RFIDS = printer.box.T1.vender %}

    {% set Slot = printer.box.T1.filament %}
    #{% set Slot = "D" %} # debug

    M1177 FIL_{apply_type} Info: Slot={Slot} BOX_RFIDS={RFIDS}

    {% set RFID='Error' %}
    {% if Slot == 'None' %}
      {% set RFID='None' %}
      M1177 FIL No active filament
    {% elif Slot == 'A' %}
      {% set RFID=RFIDS[0] %}
    {% elif Slot == 'B' %}
      {% set RFID=RFIDS[1] %}
    {% elif Slot == 'C' %}
      {% set RFID=RFIDS[2] %}
    {% elif Slot == 'D' %}
      {% set RFID=RFIDS[3] %}
    {% endif %}

    {% if RFID not in ['None','Error',"unknown"]  %}
      # Strip first 8 and last 16
      # Removes Batch/Date and Weight/Serial/Reserved
      # Stores Supplier/Material/Color
      {% set RFIDtag = RFID[8:-16] %}
      {% if apply_type == "GET" %}
        _FIL_RFID_GET_ RFID={RFIDtag} SLOT={Slot}
      {% endif %}
      {% if apply_type == "SAVE" %}
        _FIL_RFID_SAVE_ RFID={RFIDtag} SLOT={Slot}
      {% endif %}
    {% endif %}


[delayed_gcode FIL_RFID_INIT]
initial_duration: 6.0
##gcode: ## add INIT UI
##    FIL_RFID_INIT_ ## add INIT UI
##[gcode_macro FIL_RFID_INIT_] ## add INIT UI
##description: Allow load of auto PA and flow Calibrattion DB ## add INIT UI
gcode:
    {% set svv = printer.save_variables.variables %}
    {% if svv["database"] is defined %}
      M1177 FIL INIT DB={svv.database}
    {% else %}
      {% set clearDB = {"FIL_Placeholder":{"pa":0.045, "flow":0.99, "z_offset":0.00}, "settings":{"cut_pre_retract":0.0}} %}
      M1177 FIL INIT DB BEING CREATED={clearDB}
      SAVE_VARIABLE VARIABLE=database VALUE="{clearDB | pprint | replace("\n", "") | replace("\"", "\\\"")}"
    {% endif %}

[gcode_macro _FIL_CUT_PRE_RETRACT]
description: Retract filament just before T0, T1 etc.  Hoping to save filament on color changes without causing clogs.  Experimental,  change the cut_pre_retract value in the .txt file to test.
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set loadedDB = svv.database %}
    {% set retract = -loadedDB["settings"]["cut_pre_retract"] %}
    M1177 FIL_CUT_PRE_RETRACT E={retract} TEMP={printer.extruder.temperature}
    SAVE_GCODE_STATE NAME=MoveState
    M400
    G91
    {% if retract < 0.0 and printer.extruder.can_extrude|lower == 'true' %}
      G92 E0 //resets the extruder
      G1 E{retract} F360 //set it to retract X mm at 6mm/s - !! Experimental !!
      G92 E0 //resets the extruder
    {% endif %}
    G90
    M400
    M1177 FIL_CUT_PRE_RETRACT Success={printer.extruder.can_extrude}
    RESTORE_GCODE_STATE NAME=MoveState


[gcode_macro FIL_BOX_QUIT_MATERIAL]
description: Cut filament at toolhead and retract/retrude currently loaded CFS Slot material - Eg, Use after a Klipper emergency stop, it will know which slot to unload
#rename_existing: _BOX_QUIT_MATERIAL
gcode:
    # adding this macro so we know how to use this feature when needed
    BOX_QUIT_MATERIAL

[gcode_macro T0]
description: Allow setting of FIL values
rename_existing: T0.1
gcode:
    T0.1
    FIL_RFID_APPLY TYPE=GET

[gcode_macro T1]
description: Allow setting of FIL values
rename_existing: T1.1
gcode:
    T1.1
    FIL_RFID_APPLY TYPE=GET

[gcode_macro T2]
description: Allow setting of FIL values
rename_existing: T2.1
gcode:
    T2.1
    FIL_RFID_APPLY TYPE=GET

[gcode_macro T3]
description: Allow setting of FIL values
rename_existing: T3.1
gcode:
    T3.1
    FIL_RFID_APPLY TYPE=GET


[gcode_macro BOX_START_PRINT]
description: Check FIL at start of print
rename_existing:_BOX_START_PRINT
gcode:
    FIL_RFID_APPLY TYPE=GET
    _BOX_START_PRINT {rawparams}


[gcode_macro BOX_CUT_MATERIAL]
description: Pre Cut retract filament
rename_existing:_BOX_CUT_MATERIAL
gcode:
    _FIL_CUT_PRE_RETRACT
    _BOX_CUT_MATERIAL {rawparams}

[gcode_macro BOX_END_PRINT]
description: Auto Save the filament values at the end of a print
rename_existing: _BOX_END_PRINT
gcode:
   {% if printer["gcode_macro FIL_RFID_APPLY"].enable_rfid_auto_save %}
     FIL_RFID_APPLY TYPE=SAVE
     M1177 END_PRINT AUTO SAVE CALIBRATION DONE.
     SET_GCODE_VARIABLE MACRO=FIL_RFID_APPLY VARIABLE=enable_rfid_auto_save VALUE=0 # Switch back off
   {% else %}
     # Not auto save so we might have changed the z offset in _FIL_RFID_GET_
     {% set start_z_offset = printer["gcode_macro FIL_RFID_APPLY"].start_z_offset %}
     SET_GCODE_OFFSET Z={start_z_offset} # !! Experimental !!
   {% endif %}
   SET_GCODE_VARIABLE MACRO=FIL_RFID_APPLY VARIABLE=start_z_offset VALUE=-999 # clear for next print

   _BOX_END_PRINT {rawparams}






