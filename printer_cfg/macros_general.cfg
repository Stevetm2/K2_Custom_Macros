[respond]
#default_type: echo
#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
#default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".

[gcode_macro M1177]
#rename_existing: M117.0
gcode:
  {% set P_TIME = printer.idle_timeout.printing_time|int %}
  {% set C_TIME = printer.system_stats.cputime|int %}
  #M118 TIME{P_TIME}:{C_TIME}: {rawparams} # to tty
  #M117 TIME{P_TIME}:{C_TIME}: {rawparams} # to lcd
  {action_respond_info("TIME"~P_TIME~":"~C_TIME~":"~rawparams)}
  
# my macros
[include macros_test_speed.cfg]
[include macros_fil.cfg]

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    {action_respond_info(out|join("\n"))}

[gcode_macro DUMP_SAVEVARS]
gcode:
  {% set default_u = E200 %}
  {% if 'save_variables' in printer %} 
     {% set svv = printer.save_variables.variables %} 
     {% set default_u = E201 %}
     {% if 'bowden_len' in svv %} 
       {% set default_u = svv.bowden_len %} 
     {% endif %} 
   {% endif %}
   M118 Out '{default_u}'

#[gcode_macro TEST_BUTTON]
#gcode:
#  # DO NOTHING
#  {action_respond_info("test button pressed")}

#[screws_tilt_adjust]
#[bed_screws]
#screw1: 43,25
#screw1_name: front left screw
#screw2: 307, 25
#screw2_name: front right screw
#screw3: 307, 315 
#screw3_name: rear right screw 
#screw4: 43, 315
#screw4_name: rear left screw
#horizontal_move_z: 10
#speed: 100
#screw_thread: CW-M4 #measure the diameter of your adjustment screw

[delayed_gcode my_delayed_gcode]
gcode:
  FIL_SET_PURGE_RESUME AMOUNT=10
initial_duration: 2.0


[gcode_macro BED_MESH_CALIBRATE_FULL]
description: Allow enable of auto Bed Calibrate - Full bed
gcode:
     SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=enable_type VALUE=1

[gcode_macro _BED_MESH_CALIBRATE_ADAPTIVE]
description: WIP Allow enable of auto Bed Calibrate - Adaptive bed
gcode:
     SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=enable_type VALUE=2

[gcode_macro BED_MESH_CALIBRATE_OFF]
description: Allow disable of auto Bed Calibrate
gcode:
     SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=enable_type VALUE=0


[gcode_macro _BED_MESH_CALIBRATE_AD]
variable_adaptive_mesh_args: 0
gcode:
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %} # Gather all object points
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}                                                          # Get bed mesh min from printer.cfg
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}                                                          # Get bed mesh max from printer.cfg
    {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %} # Get probe count from printer.cfg                                                        
    {% set mesh_margin = 4.0|float %}
    {% set fuzz_amount = 0.5|float %}                                                                       
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}                            # Determine max probe point distance
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}                            # Determine max probe point distance
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}                                                # Set x_min from smallest object x point
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}                                                # Set y_min from smallest object y point
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %} # Set x_max from largest object x point
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %} # Set y_max from largest object y point

    {% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}                                                          # Set fuzz_range between 0 and fuzz_amount
    {% set adapted_x_min = (x_min - mesh_margin) - (fuzz_range | random / 100.0) %} # Adapt x_min to margin and fuzz constraints
    {% set adapted_y_min = (y_min - mesh_margin) - (fuzz_range | random / 100.0) %} # Adapt y_min to margin and fuzz constraints
    {% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %} # Adapt x_max to margin and fuzz constraints
    {% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %} # Adapt y_max to margin and fuzz constraints

    {% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %} # Compare adjustments to defaults and choose max
    {% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}                                                               # Compare adjustments to defaults and choose max
    {% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}                                                               # Compare adjustments to defaults and choose min
    {% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}                                                               # Compare adjustments to defaults and choose min

    {% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}          # Define probe_count's x point count and round up
    {% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}          # Define probe_count's y point count and round up

    {% if (([points_x, points_y]|max) > 6) %}                                                                                       
        {% set algorithm = "bicubic" %}                                                                                             
        {% set min_points = 4 %}                                                                                                    
    {% else %}                                                                                                                      # Calculate if algorithm should be bicubic or lagrange
        {% set algorithm = "lagrange" %}                                                                                            
        {% set min_points = 3 %}                                                                                                    
    {% endif %}                                                                                                                     

    {% set points_x = [points_x , min_points]|max %}                                                                                # Set probe_count's x points to fit the calculated algorithm
    {% set points_y = [points_y , min_points]|max %}                                                                                # Set probe_count's y points to fit the calculated algorithm
    {% set points_x = [points_x , probe_count[0]]|min %}
    {% set points_y = [points_y , probe_count[1]]|min %}

    SET_GCODE_VARIABLE MACRO=_BED_MESH_CALIBRATE_AD VARIABLE=adaptive_mesh_args VALUE='"mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} PROBE_COUNT={points_x},{points_y} ALGORITHM={algorithm}"'

    M1177 mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} PROBE_COUNT={points_x},{points_y} ALGORITHM={algorithm}

    #_BED_MESH_CALIBRATE_BASE {rawparams} PROFILE=adaptive ADAPTIVE=1 ADAPTIVE_MARGIN=0 mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}

    _BED_MESH_CALIBRATE_BASE {rawparams} PROFILE=adaptive ADAPTIVE=1 ADAPTIVE_MARGIN=0 mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM=bicubic PROBE_COUNT=9,9



# SAVE_CONFIG
[gcode_macro BED_MESH_CALIBRATE]
description: Allow disable of Bed Calibrate
rename_existing: _BED_MESH_CALIBRATE_BASE
variable_enable_type: 0
gcode:
     {% set p_enable = params.ENABLE|default(0)|int %} #could have enable macro
     {% set g_enable = enable_type %} # may gen full bed mesh if penable=1
     {% if g_enable == 2 and printer.exclude_object.objects == [] %}
        M1177 Missing EXCLUDE_OBJECT_DEFINE - disabling Adaptive Mesh
       {% set g_enable = 0 %} # may gen full bed mesh if penable=true
     {% endif %}
     {% if g_enable or p_enable %}
        M1177 Bed mesh Calibrate enabled! E{g_enable} P{p_enable} SEE [gcode_macro BED_MESH_CALIBRATE]
        BED_MESH_CLEAR
        #G28 F0 # G28 if needed
        {% if g_enable == 2 %}
          _BED_MESH_CALIBRATE_AD {rawparams} 
       {% else %}
          _BED_MESH_CALIBRATE_BASE {rawparams}
       {% endif %}
     {% else %}
        M1177 Bed mesh Calibrate disabled! E{g_enable} P{p_enable} Setting default.  SEE [gcode_macro BED_MESH_CALIBRATE]
        #G28 F0 # G28 if needed
        BED_MESH_PROFILE LOAD=default
     {% endif %}

[gcode_macro _BED_MESH_CALIBRATE_OB_TEST]
gcode:
     {% set minx = params.MINX|default(10)|float %}
     {% set miny = params.MINY|default(100)|float %}
     {% set maxx = params.MAXX|default(60)|float %}
     {% set maxy = params.MAXY|default(150)|float %}

     #{% set minx = params.MINX|default(0)|float %}
     #{% set miny = params.MINY|default(0)|float %}
     #{% set maxx = params.MAXX|default(175)|float %}
     #{% set maxy = params.MAXY|default(175)|float %}
     {% set midx = (minx + maxx) / 2.0 %}
     {% set midy = (miny + maxy) / 2.0 %}

    M1177 ex='{printer.exclude_object.objects}'
    EXCLUDE_OBJECT_DEFINE NAME=StartEndGcodeNew_id_0_copy_0 CENTER={midx},{midy} POLYGON=[[{minx},{miny}],[{maxx},{miny}],[{maxx},{maxy}],[{minx},{maxy}],[{minx},{miny}]]
    # EXCLUDE_OBJECT_DEFINE NAME=StartEndGcodeNew_id_0_copy_0 CENTER=87.5,87.5 POLYGON=[[78.75,78.75],[96.25,78.75],[96.25,96.25],[78.75,96.25],[78.75,78.75]]
    M1177 ob dat {printer["gcode_macro _BED_MESH_CALIBRATE_AD"].adaptive_mesh_args}


# START : FIL - E_PURGE_RESUME - PA

#[gcode_macro SET_PRESSURE_ADVANCE]
#description: Set and Print Pressure Advance
#rename_existing: _SET_PRESSURE_ADVANCE
#gcode:
#     M1177 Pressure Advance #'{rawparams}'
#     _SET_PRESSURE_ADVANCE {rawparams}

[gcode_macro FIL_SET_PURGE_RESUME]
description: Set the quantity of filament to purge after a RESUME
gcode:
  {% set e_purge_resume = params.AMOUNT|default(30)|int %} #could have enable macro
  M1177 Resume purge was={printer["gcode_macro PRINTER_PARAM"].e_purge_resume} new={e_purge_resume}
  SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=e_purge_resume VALUE={e_purge_resume}
  M1177 DefaultEtemp={printer.custom_macro.default_extruder_temp}


